# File: app/blob/blob_client.py

import os
import re
from datetime import datetime, timedelta
from azure.storage.blob import BlobSasPermissions, generate_blob_sas


class BlobStorageClient:
    """
    Handles Azure Blob operations using a shared BlobServiceClient instance.
    Responsible for container management, file uploads, and SAS URL generation.
    """

    def __init__(self, blob_service_client):
        """
        Initializes the BlobStorageClient.

        :param blob_service_client: Azure BlobServiceClient instance.
        """
        self.blob_service_client = blob_service_client

    def create_container_if_not_exists(self, container_name: str):
        """
        Ensures the container exists. Creates it if not found.

        :param container_name: Name of the container
        :return: ContainerClient instance
        """
        container_client = self.blob_service_client.get_container_client(container_name)
        if not container_client.exists():
            container_client.create_container()
        return container_client

    def sanitize_string(self, value: str) -> str:
        """
        Sanitizes a string for blob naming (removes special characters).

        :param value: Raw string
        :return: Sanitized string
        """
        value = re.sub(r'[^\w\-]', '_', value.strip())
        return re.sub(r'_+', '_', value)

    def rename_file(self, original_filename: str, obligor: str, industry: str, quarter: str, year: int) -> str:
        """
        Renames file using metadata and current timestamp.

        :param original_filename: Original file name
        :param obligor: Obligor name
        :param industry: Industry name
        :param quarter: Quarter (e.g., Q1)
        :param year: Year (e.g., 2025)
        :return: Sanitized and renamed filename
        """
        name, ext = os.path.splitext(original_filename)
        sanitized_name = self.sanitize_string(name)
        sanitized_obligor = self.sanitize_string(obligor)
        sanitized_industry = self.sanitize_string(industry)
        timestamp = datetime.utcnow().strftime('%Y%m%d%H%M%S')
        return f"{sanitized_name}_{sanitized_obligor}_{sanitized_industry}_{quarter}_{year}_{timestamp}{ext}"

    def upload_file_from_bytes(self, container_name: str, blob_name: str, file_bytes: bytes):
        """
        Uploads file content (in bytes) to Azure Blob.

        :param container_name: Target blob container name
        :param blob_name: Final blob name
        :param file_bytes: File content in bytes
        :return: Blob URL
        """
        container_client = self.create_container_if_not_exists(container_name)
        blob_client = container_client.get_blob_client(blob_name)
        blob_client.upload_blob(file_bytes, overwrite=True)
        return blob_client.url

    def generate_sas_url(self, container_name: str, blob_name: str, account_name: str, account_key: str) -> str:
        """
        Generates a SAS URL valid for 5 years for a blob.

        :param container_name: Blob container name
        :param blob_name: Blob name
        :param account_name: Azure account name
        :param account_key: Azure account key
        :return: SAS URL as string
        """
        start_time = datetime.utcnow() - timedelta(minutes=5)
        expiry_time = datetime.utcnow() + timedelta(days=5 * 365)

        sas_token = generate_blob_sas(
            account_name=account_name,
            container_name=container_name,
            blob_name=blob_name,
            account_key=account_key,
            permission=BlobSasPermissions(read=True),
            expiry=expiry_time,
            start=start_time
        )

        return f"https://{account_name}.blob.core.windows.net/{container_name}/{blob_name}?{sas_token}"


# File: app/blob/blob_uploader.py

import base64
from datetime import datetime
from typing import List
from app.models.blob_metadata import FileMeta
from app.blob.blob_client import BlobStorageClient
from app.db.mongo_ops import update_document_blob_info

class BlobUploaderFactory:
    """
    Factory class to initialize BlobUploader using AzureBlobConnectionManager.
    Handles dependency injection for production-grade structure.
    """

    def __init__(self):
        from azure_blob.azure_blob_connection_manager import AzureBlobConnectionManager

        self._conn_mgr = AzureBlobConnectionManager()
        self.blob_client = BlobStorageClient(self._conn_mgr.get_blob_service_client())
        self.account_name = self._conn_mgr.get_account_name()
        self.account_key = self._conn_mgr.get_account_key()

    def get_blob_uploader(self):
        """
        Returns a configured instance of BlobUploader.
        """
        return BlobUploader(
            blob_client=self.blob_client,
            account_name=self.account_name,
            account_key=self.account_key
        )


class BlobUploader:
    """
    High-level orchestrator for uploading base64-encoded documents to Azure Blob.
    Automatically updates MongoDB with SAS URLs and metadata.
    """

    def __init__(self, blob_client: BlobStorageClient, account_name: str, account_key: str):
        self.blob_client = blob_client
        self.account_name = account_name
        self.account_key = account_key

    async def upload_files(self, container_name: str, files: List[FileMeta]) -> List[dict]:
        """
        Uploads a batch of files to Azure Blob from base64 content and logs results to MongoDB.

        :param container_name: Name of the blob container
        :param files: List of FileMeta objects representing documents
        :return: List of uploaded document results with blob and SAS info
        """
        result = []

        for file in files:
            # Construct blob name
            blob_name = self.blob_client.rename_file(
                original_filename=file.original_filename,
                obligor=file.obligor,
                industry=file.industry,
                quarter=file.quarter,
                year=file.year
            )

            # Decode base64 to bytes
            file_bytes = base64.b64decode(file.base64_content)

            # Upload to Azure Blob
            blob_url = self.blob_client.upload_file_from_bytes(
                container_name=container_name,
                blob_name=blob_name,
                file_bytes=file_bytes
            )

            # Generate SAS URL
            sas_url = self.blob_client.generate_sas_url(
                container_name=container_name,
                blob_name=blob_name,
                account_name=self.account_name,
                account_key=self.account_key
            )

            # Update MongoDB
            await update_document_blob_info(
                run_id=file.run_id,
                doc_id=file.doc_id,
                renamed_filename=blob_name,
                blob_path=blob_name,
                sas_url=sas_url,
                step_name="blob_upload",
                step_result="SUCCESS"
            )

            # Append result
            result.append({
                "doc_id": file.doc_id,
                "blob_name": blob_name,
                "sas_url": sas_url,
                "metadata": {
                    "year": file.year,
                    "quarter": file.quarter,
                    "industry": file.industry,
                    "obligor": file.obligor,
                    "original_filename": file.original_filename
                }
            })

        return result
