import base64
import asyncio
from datetime import datetime
from typing import List
from app.models.blob_metadata import FileMeta
from app.blob.blob_client import BlobStorageClient
from app.db.mongo_ops import update_document_blob_info


class BlobUploaderFactory:
    """
    Factory class to initialize BlobUploader using AzureBlobConnectionManager.
    Handles dependency injection for production-grade structure.
    """

    def __init__(self):
        from common_services.azure_blob_connection_manager import AzureBlobConnectionManager

        self._conn_mgr = AzureBlobConnectionManager()
        self.blob_client = BlobStorageClient(self._conn_mgr.get_blob_service_client())
        self.account_name = self._conn_mgr.blob_account_name
        self.account_key = self._conn_mgr.blob_account_key

    def get_blob_uploader(self):
        """
        Returns a configured instance of BlobUploader.
        """
        return BlobUploader(
            blob_client=self.blob_client,
            account_name=self.account_name,
            account_key=self.account_key
        )


class BlobUploader:
    """
    High-level orchestrator for uploading base64-encoded documents to Azure Blob.
    Automatically updates MongoDB with SAS URLs and metadata.
    """

    def __init__(self, blob_client: BlobStorageClient, account_name: str, account_key: str):
        self.blob_client = blob_client
        self.account_name = account_name
        self.account_key = account_key

    async def upload_files(self, container_name: str, files: List[FileMeta]) -> List[dict]:
        """
        Uploads a batch of files to Azure Blob concurrently from base64 content and logs results to MongoDB.

        :param container_name: Name of the blob container
        :param files: List of FileMeta objects representing documents
        :return: List of uploaded document results with blob and SAS info
        """
        tasks = [self._upload_single_file(container_name, file) for file in files]
        return await asyncio.gather(*tasks)

    async def _upload_single_file(self, container_name: str, file: FileMeta) -> dict:
        """
        Uploads a single file, updates MongoDB, and returns the result dict.
        """
        blob_name = self.blob_client.rename_file(
            original_filename=file.original_filename,
            obligor=file.obligor,
            industry=file.industry,
            quarter=file.quarter,
            year=file.year
        )

        file_bytes = base64.b64decode(file.base64_content)

        blob_url = self.blob_client.upload_file_from_bytes(
            container_name=container_name,
            blob_name=blob_name,
            file_bytes=file_bytes
        )

        sas_url = self.blob_client.generate_sas_url(
            container_name=container_name,
            blob_name=blob_name,
            account_name=self.account_name,
            account_key=self.account_key
        )

        await update_document_blob_info(
            run_id=file.run_id,
            doc_id=file.doc_id,
            renamed_filename=blob_name,
            blob_path=blob_name,
            sas_url=sas_url,
            step_name="blob_upload",
            step_result="SUCCESS"
        )

        return {
            "doc_id": file.doc_id,
            "blob_name": blob_name,
            "sas_url": sas_url,
            "metadata": {
                "year": file.year,
                "quarter": file.quarter,
                "industry": file.industry,
                "obligor": file.obligor,
                "original_filename": file.original_filename
            }
        }
